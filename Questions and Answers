/* Question Set 1 - Easy

/* Q1: Who is the senior most employee based on job title?
select * from employee
order by levels desc
limit 1;

/* Q2: Which countries have the most Invoices? */
select billing_country, count(invoice_id) as no_of_invoices from invoice
group by billing_country
order by no_of_invoices desc;

/* Q3: What are top 3 values of total invoice? */
select * from invoice
order by total desc
limit 3;

/* Q4: Which city has the best customers? We would like to throw a promotional Music Festival in the city we made the most money. 
Write a query that returns one city that has the highest sum of invoice totals. 
Return both the city name & sum of all invoice totals */
select billing_city, sum(total) as sum_of_total from invoice
group by billing_city
order by sum_of_total desc
limit 1;

/* Q5: Who is the best customer? The customer who has spent the most money will be declared the best customer. 
Write a query that returns the person who has spent the most money.*/
select customer.customer_id, customer.first_name, customer.last_name, sum(invoice.total) as customer_total from invoice
inner join customer on invoice.customer_id = customer.customer_id
group by 1
order by 4 desc
limit 1;
_____________________________________________________________________________________________________________________________________________________________________
/* Question Set 2 - Moderate */

/* Q1: Write query to return the email, first name, last name, & Genre of all Rock Music listeners. 
Return your list ordered alphabetically by email starting with A. */
select distinct c.customer_id, c.first_name, c.last_name, c.email, g.name from customer as c
inner join invoice as i on c.customer_id = i.customer_id
inner join invoice_line as il on i.invoice_id = il.invoice_id
inner join track as t on il.track_id = t.track_id
inner join genre as g on t.genre_id = g.genre_id
where g.name like 'Rock'
order by 1;

/* Q2: Let's invite the artists who have written the most rock music in our dataset. 
Write a query that returns the Artist name and total track count of the top 10 rock bands. */
select a.artist_id, a.name, count(a.artist_id) as total_songs, g.name from artist as a
inner join album as al on a.artist_id = al.artist_id
inner join track as t on al.album_id = t.album_id
inner join genre as g on g.genre_id = t.genre_id
where g.name like 'Rock'
group by 1, 4
order by 3 desc
limit 10;

/* Q3: Return all the track names that have a song length longer than the average song length. 
Return the Name and Milliseconds for each track. Order by the song length with the longest songs listed first. */
select name, milliseconds from track
where milliseconds > (select avg(milliseconds) as avg_leng from track)
order by milliseconds desc;

_____________________________________________________________________________________________________________________________________________________________________1
/* Question Set 3 - Advance */

/* Q1: Find how much amount spent by each customer on artists? Write a query to return customer name, artist name and total spent */
select c.first_name, c.last_name, a.name, sum(il.unit_price * il.quantity) as total_spents from customer as c
inner join invoice as i on c.customer_id = i.customer_id
inner join invoice_line as il on i.invoice_id = il.invoice_id
inner join track as t on il.track_id = t.track_id
inner join album as al on t.album_id = al.album_id
inner join artist as a on al.artist_id = a.artist_id
group by 1,2,3
order by total_spents desc;

/* Q2: Find how much amount spent by each customer on the best selling artist? Write a query to return customer name, artist name and total spent */
with best_selling_artist as ( 
select a.artist_id, a.name, sum(il.unit_price * il.quantity) as total_sales from invoice_line as il
inner join track as t on il.track_id = t.track_id
inner join album as al on t.album_id = al.album_id
inner join artist as a on al.artist_id = a.artist_id
group by 1,2
order by total_sales desc
limit 1
)
select c.first_name, c.last_name, best_selling_artist.name, sum(il.unit_price * il.quantity) as total_spents from customer as c
inner join invoice as i on c.customer_id = i.customer_id
inner join invoice_line as il on i.invoice_id = il.invoice_id
inner join track as t on il.track_id = t.track_id
inner join album as al on t.album_id = al.album_id
inner join best_selling_artist on al.artist_id = best_selling_artist.artist_id
group by 1,2,3
order by total_spents desc;

/* Q3: We want to find out the most popular music Genre for each country. We determine the most popular genre as the genre 
with the highest amount of purchases. Write a query that returns each country along with the top Genre. For countries where 
the maximum number of purchases is shared return all Genres. */
with new_genre as (select customer.country, genre.genre_id, genre.name, count(invoice_line.quantity) as purchases, 
row_number() over(partition by customer.country order by count(invoice_line.quantity) desc) as rn
FROM customer
join invoice on customer.customer_id = invoice.customer_id
join invoice_line on invoice.invoice_id = invoice_line.invoice_id
join track on invoice_line.track_id = track.track_id
join genre on track.genre_id = genre.genre_id
group by 1,2,3
order by 1, 4 desc)
select * from new_genre
where rn <= 1;

/* Q4: Write a query that determines the customer that has spent the most on music for each country. 
Write a query that returns the country along with the top customer and how much they spent. 
For countries where the top amount spent is shared, provide all customers who spent this amount. */
with new_customer as (
select c.customer_id, c.first_name, c.last_name, i.billing_country, sum(il.quantity*il.unit_price) as total_spent,
row_number() over(partition by i.billing_country order by sum(il.quantity*il.unit_price) desc) as rn from customer as c
inner join invoice as i on c.customer_id = i.customer_id
inner join invoice_line as il on i.invoice_id = il.invoice_id
group by 1,2,3, 4
order by 4, 5 desc
)
select * from new_customer
where rn <= 1;

or, 
with new_customer as (
select c.customer_id, c.first_name, c.last_name, i.billing_country, sum(i.total) as total_spent,
row_number() over(partition by i.billing_country order by sum(i.total) desc) as rn from customer as c
inner join invoice as i on c.customer_id = i.customer_id
inner join invoice_line as il on i.invoice_id = il.invoice_id
group by 1,2,3, 4
order by 4, 5 desc
)
select * from new_customer
where rn <= 1;
___________________________________________________________________________________________________________________________________________________________________
